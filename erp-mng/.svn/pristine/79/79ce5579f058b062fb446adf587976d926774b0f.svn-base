<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>标题</title>
    <meta name="renderer" content="webkit">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <link rel="stylesheet" href="../../../../../layuiadmin/layui/css/layui.css" media="all">
    <link rel="stylesheet" href="../../../../../layuiadmin/style/admin.css" media="all">
</head>
<body>

<div class="layui-fluid">
    <div class="layui-card">
        <div class="layui-form layui-card-header layuiadmin-card-header-auto">
            <div class="layui-form-item">
                <div class="layui-inline">
                    <label class="layui-form-label" style="padding: 9px 15px;width: 60px;">车牌号</label>
                    <div class="layui-input-inline" style="width: 150px;">
                        <input type="text" name="queryObj.carPlateNum" placeholder="请输入" autocomplete="off" class="layui-input">
                    </div>
                </div>
                <div class="layui-inline">
                    <label class="layui-form-label " style="padding: 9px 15px;width: 60px;">任务状态</label>
                    <div class="layui-input-inline" style="width: 150px;">
                        <select name="queryObj.taskState">
                            <option value="0">未派单</option>
                            <option value="1">已派单</option>
                            <option value="2">进行中</option>
                            <option value="3">失败</option>
                            <option value="4">完成</option>
                            <option value="5">超时完成</option>
                        </select>
                    </div>
                </div>
                <div class="layui-inline">
                    <label class="layui-form-label" style="padding: 9px 15px;width: 60px;">类型</label>
                    <div class="layui-input-inline" style="width: 150px;">
                        <select name="queryObj.taskType">
                            <option value=""></option>
                            <option value="0">维修</option>
                            <option value="1">安装</option>
                        </select>
                    </div>
                </div>
                <div class="layui-inline" style="margin-bottom: 5px;">
                    <label class="layui-form-label" style="text-align: center;width: 120px;">任务进行时间区间</label>
                    <div class="layui-input-inline">
                        <input type="text" name="queryObj.selectTime" class="layui-input" id="test6" autocomplete="off" placeholder=" 请选择区间 ">
                    </div>
                </div>

                <div class="layui-inline" style="margin-bottom: 8px;">
                    <button class="layui-btn layuiadmin-btn-comm" data-type="reload" lay-submit lay-filter="ErpWorkTask-search">
                        <i class="layui-icon layui-icon-search layuiadmin-button-btn"></i>
                    </button>
                </div>

            </div>
        </div>
        <div class="layui-card-body">
            <div style="padding-bottom: 10px;">
                <button class="layui-btn layuiadmin-btn-comm" data-type="batchdel">删除</button>
                <button class="layui-btn layuiadmin-btn-comm" data-type="add">添加</button>
            </div>
            <table id="ErpWorkTask-list" lay-filter="ErpWorkTask-list"></table>
            <script type="text/html" id="table-ErpWorkTask-list">
                <a class="layui-btn layui-btn-normal layui-btn-xs" id="renWuId" lay-event="renWu">任务</a>
                <a class="layui-btn layui-btn-normal layui-btn-xs" id="paiDanId" lay-event="paiDan">派单</a>
                <a class="layui-btn layui-btn-normal layui-btn-xs" lay-event="complete">完成</a>
                <a class="layui-btn layui-btn-normal layui-btn-xs"  lay-event="edit"><i class="layui-icon layui-icon-edit"></i>编辑</a>
                <a class="layui-btn layui-btn-danger layui-btn-xs" lay-event="del"><i class="layui-icon layui-icon-delete"></i>删除</a>
            </script>
        </div>
    </div>
</div>
<script src="../../../../../layuiadmin/layui/layui.js"></script>
<script>
        layui.config({
            base: '../../../../../layuiadmin/' //静态资源所在路径
        }).extend({
            index:'lib/index',
            common:'common'
        }).use(['index','table', 'form','common','laydate'], function(exports){
            var $ = layui.$
                ,laydate = layui.laydate
                ,table = layui.table
                ,common = layui.common
                ,admin = layui.admin
                ,form = layui.form;

            //查询
            form.on('submit(ErpWorkTask-search)', function(data){
                var field = data.field;

                //执行重载
                table.reload('ErpWorkTask-list', {
                    where: field,
                    page:{
                        curr:1
                    }
                });
            });

            /*
            * 定义表格
            * */
            defineTable = function () {
                var headers = layui.admin.getTokenHeader();
                table.render({
                    elem: '#ErpWorkTask-list' //指定原始表格的选择器（id选择器）
                    ,url:layui.setter.basePath +'/admin/erpWorkTask/listpage.jsn' //模拟接口
                    ,headers:headers
                    ,method: 'post'
                    ,parseData: function(res){ //res 即为原始返回的数据
                        return {
                            "code": res.success, //解析接口状态
                            "msg": res.errMsg, //解析提示文本
                            "count": res.totalCount, //解析数据长度
                            "data": res.list //解析数据列表
                        };
                    }
                    ,response: {
                        statusCode: true //规定成功的状态码，默认：0
                    }
                    ,cols: [[
                        {type: 'checkbox', fixed: 'left'}
                    ,{field: 'id',align: 'center', width: 200, title: '主键',sort: true,hide:true}
                    ,{field: 'createTime',align: 'center', width: 200, title: '创建时间',templet: function(d){
                    return common.DateFormat(d.createTime,"yyyy-MM-dd");},sort: true,hide:true}
            ,{field: 'createUserId',align: 'center', width: 200, title: '创建人ID',sort: true,hide:true}
            ,{field: 'createUserName',align: 'center', width: 200, title: '创建人名',sort: true,hide:true}
            ,{field: 'taskTitle',align: 'center', width: 200, title: '标题',sort: true}
            ,{field: 'taskType',align: 'center', width: 100, title: '类型',sort: true,
                templet: function(d){
                    if(d.taskType==1){
                        return '安装';
                    }else if(d.taskType==0){
                        return '维修';
                    }else{
                        return '';
                    }
                }
            }
            ,{field: 'taskState',align: 'center', width: 200, title: '任务状态',sort: true,
                templet: function(d){
                    if(d.taskState==0){
                        return "未派单";
                    }else if(d.taskState==1) {
                        return "已派单";
                    }else if(d.taskState==2){
                        return "进行中";
                    }else if(d.taskState==3){
                        return "失败";
                    }else if (d.taskState==4){
                        return "完成";
                    }else if (d.taskState==5){
                        return "超时完成";
                    }else{
                        return '';
                    }
                }
            }
            ,{field: 'taskDesc',align: 'center', width: 200, title: '描述',sort: true}
            ,{field: 'priorityLevel',align: 'center', width: 200, title: '优先级',sort: true,
                templet: function(d){
                    if(d.priorityLevel==0){
                        return "一般";
                    }else if(d.priorityLevel==1) {
                        return "加急";
                    }else if(d.priorityLevel==2){
                        return "可缓";
                    }else{
                        return '';
                    }
                }
            }
                    ,{field: 'endTime',align: 'center', width: 200, title: '完成时限',templet: function(d){
                    return common.DateFormat(d.endTime,"yyyy-MM-dd");},sort: true}
            ,{field: 'weituoUser',align: 'center', width: 200, title: '委托人',sort: true}
            ,{field: 'carPlateNum',align: 'center', width: 200, title: '车牌号',sort: true}
            ,{field: 'yehuName',align: 'center', width: 200, title: '业户名称',sort: true}

            ,{field: 'reason',align: 'center', width: 200, title: '原因',sort: true}
            ,{field: 'isGetMoney',align: 'center', width: 200, title: '是否收钱',sort: true,
                templet: function(d){
                    if(d.isGetMoney==1){
                        return '是';
                    }else if(d.isGetMoney==0){
                        return '否';
                    }else{
                        return '';
                    }
                }
            }
            ,{field: 'finishedUserId',align: 'center', width: 200, title: '完成人ID',sort: true,hide:true}
            ,{field: 'finishedUserName',align: 'center', width: 200, title: '完成人',sort: true}
                    ,{field: 'finishedTime',align: 'center', width: 200, title: '完成时间',templet: function(d){
                    return common.DateFormat(d.finishedTime,"yyyy-MM-dd");},sort: true}
            ,{field: 'getMoneyNum',align: 'center', width: 200, title: '收钱金额',sort: true}
            ,{field: 'dataState',align: 'center', width: 200, title: '数据状态',sort: true,hide:true}
                    ,{title: '操作', minWidth: 300, align: 'center', fixed: 'right', toolbar: '#table-ErpWorkTask-list'}
            ]]
            ,autoSort: false
                    ,page: true
                    ,limit: 10
                    ,limits: [10, 20, 30,40]
                    ,text: {
                    none: '暂无相关数据'
                }
            });

                //为toolbar添加事件响应
                table.on('tool(ErpWorkTask-list)', function(obj){ //注：tool是工具条事件名，test是table原始容器的属性 lay-filter="对应的值"
                    /*var data = obj.data;*///获得当前行数据
                    //区分事件
                    switch(obj.event){
                        case 'del':
                            deleteVo(obj);
                            break;
                        case 'edit':
                            editVo(obj);
                            break;
                        case 'paiDan':
                            paiDanVo(obj);
                            break;
                        case 'renWu':
                            renWuVo(obj);
                            break;
                        case 'complete':
                            completeVo(obj);
                            break;
                    };
                });

                //监听排序事件
                table.on('sort(ErpWorkTask-list)', function(obj){ //注：sort是工具条事件名，LAY-app-province-list是table原始容器的属性 lay-filter="对应的值"
                    var sort = obj.field;
                    //默认排序
                    switch(obj.field){
                        case 'id':
                            sort ="ID";
                            break;
                        case 'createTime':
                            sort ="CREATE_TIME";
                            break;
                        case 'createUserId':
                            sort ="CREATE_USER_ID";
                            break;
                        case 'createUserName':
                            sort ="CREATE_USER_NAME";
                            break;
                        case 'taskTitle':
                            sort ="TASK_TITLE";
                            break;
                        case 'taskType':
                            sort ="TASK_TYPE";
                            break;
                        case 'taskDesc':
                            sort ="TASK_DESC";
                            break;
                        case 'priorityLevel':
                            sort ="PRIORITY_LEVEL";
                            break;
                        case 'endTime':
                            sort ="END_TIME";
                            break;
                        case 'weituoUser':
                            sort ="WEITUO_USER";
                            break;
                        case 'carPlateNum':
                            sort ="CAR_PLATE_NUM";
                            break;
                        case 'yehuName':
                            sort ="YEHU_NAME";
                            break;
                        case 'taskState':
                            sort ="TASK_STATE";
                            break;
                        case 'reason':
                            sort ="REASON";
                            break;
                        case 'isGetMoney':
                            sort ="IS_GET_MONEY";
                            break;
                        case 'finishedUserId':
                            sort ="FINISHED_USER_ID";
                            break;
                        case 'finishedUserName':
                            sort ="FINISHED_USER_NAME";
                            break;
                        case 'finishedTime':
                            sort ="FINISHED_TIME";
                            break;
                        case 'getMoneyNum':
                            sort ="GET_MONEY_NUM";
                            break;
                        case 'dataState':
                            sort ="DATA_STATE";
                            break;
                    };
                    if(obj.type==null){
                        return;
                    }
                    //有些时候，你可能需要根据当前排序的字段，重新向服务端发送请求，从而实现服务端排序，如：
                    table.reload('ErpWorkTask-list', {
                        initSort: obj//记录初始排序，如果不设的话，将无法标记表头的排序状态。
                        ,where: { //请求参数（注意：这里面的参数可任意定义，并非下面固定的格式）
                            orderBy: sort+" "+obj.type //排序字段
                        }
                    });
                });
            }
            defineTable();


            //触发派单事件
            paiDanVo = function(obj){
                //判断当前的外勤是否存在去掉
                if(obj.data.taskState=='3'){
                    layer.alert('该派单已失败', {
                        offset: 'auto',
                    });
                }else if(obj.data.taskState=='4'){
                    layer.alert('该派单已完成', {
                        offset: 'auto',
                    });
                }else if(obj.data.taskState=='5'){
                    layer.alert('该派单已完成', {
                        offset: 'auto',
                    });
                }else {
                    layer.open({
                        type: 2
                        ,title: '添加外勤人员'
                        ,content: 'ErpWorkTaskAddOutPutUser.html'
                        ,maxmin: true
                        ,area: ['550px', '450px']
                        ,btn: ['确定', '取消']
                        ,success: function(layero, index){
                            var s = layero.find('iframe');
                            $("id",s[0].contentWindow.document).val(obj.data.id);
                            //给iframe元素赋值
                            var othis = layero.find('iframe').contents().find("#ErpWorkTask-form").click();
                            othis.find('input[name="id"]').val(obj.data.id);
                        }
                        ,yes: function(index, layero){
                            var submit = layero.find('iframe').contents().find("#ErpWorkTask-form-adduser");
                            submit.trigger('click');
                        }
                    });
                }

                //派单已派发
                // admin.req({
                //     url:layui.setter.basePath +'/admin/erpWorkTask/updateTaskState.jsn',
                //     data:{'ids':obj.data.id},
                //     method:"post",
                //     success:function (data) {
                //
                //     },
                // });
            }

            //任务
            renWuVo = function (obj) {
                admin.req({
                    url:layui.setter.basePath +'/admin/erpWorkTask/queryOneTask.jsn',
                    data:{'id':obj.data.id},
                    method:"post",
                    success:function(data){
                        debugger;
                        if(data.data.id !==null ){
                            layer.open({
                                type: 2
                                ,title: '任务工单'
                                ,content: 'ErpWorkTaskOrder.html'
                                ,maxmin: true
                                ,area: ['550px', '550px']
                                ,btn: ['返回']
                                ,success: function(layero, index){
                                    var s = layero.find('iframe');
                                    $("id",s[0].contentWindow.document).val(obj.data.id);
                                    //给iframe元素赋值
                                    var othis = layero.find('iframe').contents().find("#ErpWorkTask-form").click();
                                    debugger;
                                    //var othis = layero.find('iframe').contents().find().click();
                                    othis.find('input[name="id"]').val(obj.data.id);
                                    othis.find('input[name="createTime"]').val(obj.data.createTime);
                                    othis.find('input[name="createUserId"]').val(obj.data.createUserId);
                                    othis.find('input[name="createUserName"]').val(obj.data.createUserName);
                                    othis.find('input[name="ownerWorkTaskId"]').val(obj.data.ownerWorkTaskId);
                                    othis.find('input[name="ownerWorkTaskTitle"]').val(obj.data.ownerWorkTaskTitle);
                                    othis.find('input[name="ownerWorkTaskDesc"]').val(obj.data.ownerWorkTaskDesc);
                                    othis.find('input[name="taskOrderState"]').val(obj.data.taskOrderState);
                                    othis.find('input[name="innerUserId"]').val(obj.data.innerUserId);
                                    othis.find('input[name="innerUserName"]').val(obj.data.innerUserName);
                                    othis.find('input[name="outputUserId"]').val(obj.data.outputUserId);
                                    othis.find('input[name="outputUserName"]').val(obj.data.outputUserName);
                                    othis.find('input[name="isOverWork"]').val(obj.data.isOverWork);
                                    othis.find('input[name="overWorkTime"]').val(obj.data.overWorkTime);
                                    othis.find('input[name="overWorkDesc"]').val(obj.data.overWorkDesc);
                                    othis.find('input[name="outReason"]').val(obj.data.outReason);
                                    othis.find('input[name="confirmUserId"]').val(obj.data.confirmUserId);
                                    othis.find('input[name="confirmUserName"]').val(obj.data.confirmUserName);
                                    othis.find('input[name="confirmTime"]').val(obj.data.confirmTime);
                                    othis.find('input[name="finishedUserId"]').val(obj.data.finishedUserId);
                                    othis.find('input[name="finishedUserName"]').val(obj.data.finishedUserName);
                                    othis.find('input[name="finishedTime"]').val(obj.data.finishedTime);
                                    othis.find('input[name="outUserId"]').val(obj.data.outUserId);
                                    othis.find('input[name="outUserName"]').val(obj.data.outUserName);
                                    othis.find('input[name="outTime"]').val(obj.data.outTime);
                                    othis.find('input[name="outWorkTaskId"]').val(obj.data.outWorkTaskId);
                                    othis.find('input[name="dataState"]').val(obj.data.dataState);
                                    form.render();
                                }
                                ,yes: function(index, layero){
                                    var submit = layero.find('iframe').contents().find("#ErpWorkTask-form-edit");
                                    submit.trigger('click');
                                }
                            });
                        }

                    }
                });

            }

            completeVo = function(obj){
                if(obj.data.taskState=='3'){
                    layer.alert('该派单已失败', {
                        offset: 'auto',
                    });
                }else if(obj.data.taskState=='4'){
                    layer.alert('该派单已完成', {
                        offset: 'auto',
                    });
                }else if(obj.data.taskState=='5'){
                    layer.alert('该派单已完成', {
                        offset: 'auto',
                    });
                }else {
                    layer.confirm('确定完成此派单吗？', function(index){
                        admin.req({
                            url:layui.setter.basePath +'/admin/erpWorkTask/updateCompleteWork.jsn',
                            data:{'ids':obj.data.id},
                            method:"post",
                            success:function (data) {
                                table.reload('ErpWorkTask-list');
                                layer.close(index);
                                layer.msg('派单完成', {
                                    icon: 1
                                });
                            },
                        });
                    });
                }

            }


            //删除
            deleteVo = function (obj) {
                layer.confirm('确定删除此记录吗？', function(index){
                    admin.req({
                        url:layui.setter.basePath +'/admin/erpWorkTask/deleteByIds.jsn',
                        data:{'ids':obj.data.id},
                        method:"post",
                        success:function (data) {
                            table.reload('ErpWorkTask-list',
                                {page:
                                    { curr: common.deleteJumpPage(obj) // 执行页面跳转方法
                                    }
                                }
                            );
                            layer.close(index);
                            layer.msg('删除成功', {
                                icon: 1
                            });
                        },
                    });
                });
            }

            //编辑
            editVo = function (obj) {
                layer.open({
                    type: 2
                    ,title: '编辑'
                    ,content: 'ErpWorkTaskEdit.html'
                    ,maxmin: true
                    ,area: ['550px', '550px']
                    ,btn: ['确定', '取消']
                    ,success: function(layero, index){
                        var s = layero.find('iframe');
                        $("id",s[0].contentWindow.document).val(obj.data.id);
                        //给iframe元素赋值
                        var othis = layero.find('iframe').contents().find("#ErpWorkTask-form").click();

                        othis.find('input[name="id"]').val(obj.data.id);
                        othis.find('input[name="createTime"]').val(obj.data.createTime);
                        othis.find('input[name="createUserId"]').val(obj.data.createUserId);
                        othis.find('input[name="createUserName"]').val(obj.data.createUserName);
                        othis.find('input[name="taskTitle"]').val(obj.data.taskTitle);
                        othis.find('input[name="taskType"][value=\'0\']').attr("checked", obj.data.taskType == 0 ? true : false);
                        othis.find('input[name="taskType"][value=\'1\']').attr("checked", obj.data.taskType == 1 ? true : false);
                        othis.find('input[name="taskDesc"]').val(obj.data.taskDesc);
                        othis.find('input[name="priorityLevelInput"]').val(obj.data.priorityLevel);
                        othis.find('input[name="endTime"]').val(obj.data.endTime);
                        othis.find('input[name="weituoUser"]').val(obj.data.weituoUser);
                        othis.find('input[name="carPlateNum"]').val(obj.data.carPlateNum);
                        othis.find('input[name="yehuName"]').val(obj.data.yehuName);
                        othis.find('input[name="taskState"]').val(obj.data.taskState);
                        othis.find('input[name="reason"]').val(obj.data.reason);
                        othis.find('input[name="isGetMoney"][value=\'0\']').attr("checked", obj.data.isGetMoney == 0 ? true : false);
                        othis.find('input[name="isGetMoney"][value=\'1\']').attr("checked", obj.data.isGetMoney == 1 ? true : false);
                        othis.find('input[name="finishedUserId"]').val(obj.data.finishedUserId);
                        othis.find('input[name="finishedUserName"]').val(obj.data.finishedUserName);
                        othis.find('input[name="finishedTime"]').val(obj.data.finishedTime);
                        othis.find('input[name="getMoneyNum"]').val(obj.data.getMoneyNum);
                        othis.find('input[name="dataState"]').val(obj.data.dataState);
                        form.render();
                    }
                    ,yes: function(index, layero){
                        var submit = layero.find('iframe').contents().find("#ErpWorkTask-form-edit");
                        submit.trigger('click');
                    }
                });
            }


            //点击事件
            var active = {
                //批量删除
                batchdel: function(){
                    var checkStatus = table.checkStatus('ErpWorkTask-list')
                        ,checkData = checkStatus.data; //得到选中的数据

                    if(checkData.length === 0){
                        return layer.msg('请选择数据');
                    }

                    layer.confirm('确定删除吗？', function(index) {
                        var ids = "" ;
                        for(var i = 0;i<checkData.length;i++){
                            if(ids==""){
                                ids= checkData[i].id;
                            }else {
                                ids = ids+","+checkData[i].id;
                            }
                        }
                        admin.req({
                            url:layui.setter.basePath +'/admin/erpWorkTask/deleteByIds.jsn',
                            data:{'ids':ids},
                            method:"post",
                            success:function (data) {
                                table.reload('ErpWorkTask-list',
                                    {page:
                                        { curr: common.deleteDulJumpPage(checkStatus) // 执行页面跳转方法
                                        }
                                    }
                                );
                                layer.msg('删除成功', {
                                    icon: 1
                                });
                            },
                        });
                    });
                }
                //添加
                ,add: function(){
                    layer.open({
                        type: 2
                        ,title: '添加'
                        ,content: 'ErpWorkTaskAdd.html'
                        ,maxmin: true
                        ,area: ['550px', '550px']
                        ,btn: ['确定', '取消']
                        ,yes: function(index, layero){
                            //点击确认触发 iframe 内容中的按钮提交
                            var submit = layero.find('iframe').contents().find("#ErpWorkTask-form-submit");
                            submit.click();
                        }
                    });
                }
            }
            //绑定点击事件
            $('.layui-btn.layuiadmin-btn-comm').on('click', function(){
                var type = $(this).data('type');
                active[type] ? active[type].call(this) : '';
            });

            //日期范围
            laydate.render({
                elem: '#test6'
                ,range: true
            });

        });

</script>
</body>
</html>

